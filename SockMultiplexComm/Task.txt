Необходимо реализовать веб-сервер, использующий мультиплексирование TCP/IP соединений. 

Данный веб-сервер должен реализовывать один HTTP-route "/hash", 
доступный при использовании HTTP-метода POST; 
все остальные запросы и методы должны возвращать HTTP статус-код 409 с пустым телом ответа.
В качестве тела принимаемого сообщения должен восприниматься JSON вида 
{"str": "random string", "rounds": unsigned int}; 
в качестве ответа должен выдаваться корректный HTTP-ответ, 
соответствующий стандарту HTTP 1.0 с JSON вида 
{"str": "input string", "rounds": unsigned int, "sha512":  "hash"}, 
где под input sting подразумевается принятая на вход строка, 
под unsigned int — переданное на вход целое беззнаковое число, 
а под hash подразумевается построенный над этой строкой SHA512 хэш с использованием N раундов. 
Соль использовать не нужно. Для построения хэша вам необходимо использовать одну и ту же библиотеку;
 
в случае отсутствия возражений я предлагаю использовать стандартную библиотеку crypt : https://linux.die.net/man/3/crypt

Программа должна быть реализована на языке C++ и не содержать существенных ворнингов при компиляции. 
Можно игнорировать потенциальное несоответствие big-endian/little-endian на клиенте и сервере 
(проверить вам все равно будет не на чем, думаю).

Реализуемый метод мультиплексирования должен быть реализован как реализация общего родительского класса, 
который порождает сервер с использованием нужного метода мультиплексирования 
при помощи аргументов командной строки 
(рекомендую использовать boost или argparse для чтения входных параметров). 
Команда, запускающая веб-сервер, должна вопринимать следующие опции: 
-listen <ip address> 
-port <port number> 
-multiplexer <enum>

пример запуска: ./a.out --listen 0.0.0.0 --port 5000 --multiplexer select

В качестве multiplexer должны быть реализованы:
Лера — select и epoll
Кирилл — select и kqueue

Модель порождения ответов должна соответствовать следующему шаблону. 
Главный процесс принимает TCP/IP соединение, порождает дополнительную нить (thread) 
и передает ей на исполнение все, кроме непосредственно приема соединения 
(т.е проверку запроса на корректность, проверку запроса на соответствие, парсинг сообщения, генерация ответа).

Для реализации можете использовать абсолютно все что угодно, 
кроме готовых реализаций мультиплексирующих TCP-серверов. 
Ворнинги, порождаемые используемыми библиотеками я буду оценивать по обстоятельствам 
(существуют случаи, когда ворнинг является фальшивым, и в готовых хороших библиотеках эта частая история).

В дополнение вы должны совместно написать любой корректный генератор нагрузки, 
симулирующий мультиклиентское окружение, посылающее запросы заданного вида на ваш сервер. 
Я бы рекомендовал использовать готовые решения для этого: JMeter, Gatling, Yandex Tank — но можете выбрать что угодно. 
В любом случае, я буду проверять выбранное или написанное решение для генерации нагрузки на корректность, 
т.к в этой части слишком легко ошибиться, если писать самому.

Срок реализации 3 недели, т.е дедлайн 10 апреля.

Олег Борисенко, [06.04.17 14:31]
curl -H "Content-Type: application/json" -X POST -d '{"str": "i want to hash this", "rounds": 10000}' http://localhost:5000/hash

Олег Борисенко, [06.04.17 14:32]
-H - проставляет хэдер (можно и без него вообще в вашем случае - я просто показываю, как "надо" в принципе)

-X - задает HTTP-метод

-d  - говорит, что послать в теле запроса